apiVersion: batch/v1
kind: Job
metadata:
  name: "preupgrade-db-migration-{{ .Release.Name }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "preupgrade-db-migration-{{ .Release.Name }}"
    spec:
      restartPolicy: Never
      containers:
        - name: pre-upgrade-job
          image: postgres:13
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.postgres.username }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.postgres.password }}"
            - name: POSTGRES_HOST
              value: "{{ .Values.postgres.hostname }}"
          command: [ "bash", "-c" ]
          args:
              - |
                for db in ca devicemanager dmsmanager alerts
                do
                  echo "Checking if table 'goose_db_version' exists in $db"
                  if PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $db -tc "SELECT 1 FROM pg_tables WHERE tablename = 'goose_db_version'" | grep -q 1; then
                    echo "  >> table ALREADY EXISTS in $db DB. Skipping..."
                  else
                    echo "  >> table DOES NOT EXIST in $db. Creating table..."
                    PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $db -c \
                      "CREATE TABLE goose_db_version (
                        id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
                        version_id int8 NOT NULL,
                        is_applied bool NOT NULL,
                        tstamp timestamp DEFAULT now() NOT NULL,
                        CONSTRAINT goose_db_version_pkey PRIMARY KEY (id)
                      );"

                    echo "  >> table CREATED in $db DB."
                    echo "  >> inserting initial version record..."
                    PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $db -c "INSERT INTO goose_db_version (version_id, is_applied, tstamp) VALUES(1, true, now());"
                    echo "  >> initial version record INSERTED in $db DB."
                    echo "  >> DB $db is now READY!!"
                  fi
                    echo ""
                done
                
                for db in va kms
                do
                  echo "Checking if DB '$db' exists"
                  DB_EXISTENCE=$(PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -d postgres -tc "SELECT 1 FROM pg_database WHERE datname='$db'" | tr -d ' ')
                  if [ "$DB_EXISTENCE" == "1" ]; then
                    echo "  >> Database '$db' already exists. Skipping creation."
                  else
                    echo "  >> Database '$db' does not exist. Creating..."
                    # PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER -c "CREATE DATABASE $db;"
                    echo "  >> Database '$db' created successfully."
                  fi
                done
