global:
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
  ##
  imagePullPolicy: Always
debugMode: true
# Downstream TLS (API Gateway)
tls:
  # -- TLS certificate provider to use for the API Gateway. Allowed values are: `certManager`, `external`
  type: certManager
  certManagerOptions:
    # -- CertManager ClusterIssuer to use to sign the certificate for the API Gateway.
    clusterIssuer: ""
    # -- CertManager Issuer to use to sign the certificate for the API Gateway. Ignored if `clusterIssuer` is set. If left empty, a self signed certificate will be used.
    issuer: ""
    # -- Duration for the certificate to be valid
    duration: "2160h" # 2160h == 90days
  externalOptions:
    # -- Secret name for the TLS certificate to be used for the API Gateway (the secret at least must have `tls.crt` and `tls.key` keys)
    secretName: ""
ingress:
  enabled: true
  # -- Hostname to be used for the Ingress resource to route all incoming traffic to the API Gateway
  hostname: dev.lamassu.io
  # -- Annotations to be added to the Ingress resource
  annotations: ""
service:
  # Type of service to use for Lamassu's API Gateway component. Allowed values are: `ClusterIP`, `NodePort`, `LoadBalancer`
  type: ClusterIP
  nodePorts:
    # -- (int) Node port for the HTTP port from the API Gateway service
    apiGatewayTls:
    # -- (int) Node port for the HTTP port from the API Gateway service
    apiGateway:
postgres:
  # -- Hostname for the PostgreSQL server
  hostname: ""
  # -- Port for the PostgreSQL server
  port: 5432
  # -- Username to be used to authenticate with the PostgreSQL server
  username: ""
  # -- Password to be used to authenticate with the PostgreSQL server
  password: ""
amqp:
  # -- Hostname for the AMQP server
  hostname: ""
  # -- Port for the AMQP server
  port: 5672
  # -- Username to be used to authenticate with the AMQP server
  username: ""
  # -- Password to be used to authenticate with the AMQP server
  password: ""
  # -- Enable AMQP over TLS (aka AMPQS)
  tls: false
auth:
  oidc:
    frontend:
      # -- Client ID to be used as the OIDC client for the frontend
      clientId: "frontend"
      # -- URL pointing to the OIDC provider's base path to build the OIDC well-known URL (This is the complete URL preceding the "/.well-known/openid-configuration" URL). Can be a JS expression
      authority: https://${window.location.host}/auth/realms/lamassu
      awsCognito:
        # -- Enable AWS Cognito as the OIDC provider for the frontend
        enabled: false
        # -- AWS Cognito Hosted UI Domain
        hostedUiDomain: ""
    apiGateway:
      # -- URL pointing to the issuer's public key set to validate the JWT tokens.
      jwksUrl: https://auth:8443/auth/realms/lamassu/protocol/openid-connect/certs
  authorization:
    # -- Claim to use to find and filter the user's roles
    rolesClaim: realm_access.roles
    roles:
      # -- Role association to be used to authorize the user as LAMASSU's admin
      admin: pki-admin
      # -- Role association to be used to authorize the user as LAMASSU's operator
      operator: operator
services:
  keycloak:
    # -- If disabled, the internal Keycloak authentication component is disabled. An external one must be provided through the `auth.oidc` properties
    enabled: true
    # -- Docker image for keycloak component
    image: ghcr.io/lamassuiot/keycloak:2.1.0
    adminCreds:
      # -- Username for the Keycloak admin user (used by the master realm)
      username: "admin"
      # -- Password for the Keycloak admin user (used by the master realm)
      password: "admin"
  ui:
    # -- Docker image for the UI component
    image: ghcr.io/lamassuiot/lamassu-ui:2.5.3
  va:
    # -- Docker image for the VA component
    image: ghcr.io/lamassuiot/lamassu-va:2.5.3
  ca:
    # -- Domain to be used while signing/generating new CAs and certificates
    domain: dev.lamassu.io
    # -- Docker image for the CA component
    image: ghcr.io/lamassuiot/lamassu-ca:2.5.3
    monitoring:
      # -- Frequency to check the CA's health status uses CRON syntax. Can also be specified at a "second" level by adding one extra term
      frequency: "* * * * *"
    engines:
      # -- Default engine ID to be used for the CA component
      defaultEngineID: "golang-1"
      golang:
        - id: "golang-1"
          storage_directory: "/data"
          metadata:
            prod-ready: "false"
      awsKms:
      awsSecretsManager:
      pkcs11:
      hashicorpVault:
  deviceManager:
    # -- Docker image for the Device Manager component
    image: ghcr.io/lamassuiot/lamassu-devmanager:2.5.3
  dmsManager:
    # -- Docker image for the DMS Manager component
    image: ghcr.io/lamassuiot/lamassu-dmsmanager:2.5.3
  openPolicyAgent:
    # -- Docker image for the Open Policy Agent component
    image: openpolicyagent/opa:0.37.1-envoy
    remLogger:
      # -- Docker image for the Remote Logger component
      image: ghcr.io/lamassuiot/opa-rem-logger:2.1.0
  alerts:
    # -- Docker image for the Alerts component
    image: ghcr.io/lamassuiot/lamassu-alerts:2.5.3
    smtp_server:
      # -- email address to use as the sender of the alerts
      from: ""
      # -- skip TLS verification
      insecure: false
      # -- use TLS for the SMTP connection
      enable_ssl: true
      # -- SMTP server username
      username: ""
      # -- SMTP server password
      password: ""
      # -- SMTP server hostname
      host: ""
      # -- SMTP server port
      port: 25
  awsConnector:
    # -- Enable the AWS IoT Connector
    enabled: false
    # -- Docker image for the AWS Connector component
    image: ghcr.io/lamassuiot/lamassu-aws-connector:2.5.3
    # -- AWS IoT Connector ID. It is strongly recommended to use the aws.<account_id> format
    connectorID: "aws.<account_id>"
    credentials:
